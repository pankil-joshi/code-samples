<?phpnamespace App\Controllers\Web;use Quill\Factories\ModelFactory;use Quill\Exceptions\BaseException;class AccountBaseController extends \App\Controllers\BaseController {    function __construct($app = NULL) {        parent::__construct($app);                $app->slim->error(function (\Exception $exception) use ($app) {        $data['data']['base_url'] = $this->app->config('base_url');        $data['data']['base_assets_url'] = $this->app->config('base_assets_url');        $data['app'] = $this->app->config();        $data['exception'] = $exception;        $data['meta'] = array('title' => 'Error');            $viewObj = new \Quill\View();            $viewObj->make('web/general/error.php', $data);        });                $this->models = ModelFactory::boot(array('User'));        if (empty($_COOKIE['token'])) {            $path = $app->slim->request()->getPathInfo();            $this->slim->redirect($this->app->config('base_url') . 'account/login/?redirect=' . substr($path, 1));        } else {            $token = $_COOKIE['token'];            $signer = new \Lcobucci\JWT\Signer\Rsa\Sha256();            $token = (new \Lcobucci\JWT\Parser())->parse((string) $token); // Parses from a string            $_SERVER['HTTP_TOKEN'] = '';            $publicKey = new \Lcobucci\JWT\Signer\Key($this->app->config('public_key_path'));            if ($token->verify($signer, $publicKey)) {                $data = new \Lcobucci\JWT\ValidationData(); // It will use the current time to validate (iat, nbf and exp)\                $data->setIssuer($this->app->config('token_issuer'));                $data->setAudience($this->app->config('token_audience'));                $data->setId('mobile');                if ($token->validate($data)) {                    $user = $token->getClaim('user');                    $user = $this->models->user->validateCustomer($user->id);                    if (empty($user)) {                        throw new BaseException('Access to your account has been restricted.', array(), 403);                    }                    $this->app->user = $user;                    \Quill\View::share(array('user' => $this->app->user));                } else {                    throw new BaseException('Token validation failed.');                }            } else {                throw new BaseException('Token verification failed.');            }        }    }}